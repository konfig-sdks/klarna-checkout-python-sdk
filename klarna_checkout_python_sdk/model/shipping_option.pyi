# coding: utf-8

"""
    Klarna Checkout API V3

    The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from klarna_checkout_python_sdk import schemas  # noqa: F401


class ShippingOption(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "tax_amount",
            "price",
            "name",
            "id",
            "tax_rate",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            price = schemas.Int64Schema
            tax_amount = schemas.Int64Schema
            tax_rate = schemas.Int64Schema
            description = schemas.StrSchema
            promo = schemas.StrSchema
            preselected = schemas.BoolSchema
            shipping_method = schemas.StrSchema
        
            @staticmethod
            def delivery_details() -> typing.Type['DeliveryDetailsV1']:
                return DeliveryDetailsV1
            tms_reference = schemas.StrSchema
            
            
            class selected_addons(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SelectedAddon']:
                        return SelectedAddon
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SelectedAddon'], typing.List['SelectedAddon']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'selected_addons':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SelectedAddon':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "name": name,
                "price": price,
                "tax_amount": tax_amount,
                "tax_rate": tax_rate,
                "description": description,
                "promo": promo,
                "preselected": preselected,
                "shipping_method": shipping_method,
                "delivery_details": delivery_details,
                "tms_reference": tms_reference,
                "selected_addons": selected_addons,
            }
    
    tax_amount: MetaOapg.properties.tax_amount
    price: MetaOapg.properties.price
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    tax_rate: MetaOapg.properties.tax_rate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_amount"]) -> MetaOapg.properties.tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_rate"]) -> MetaOapg.properties.tax_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["promo"]) -> MetaOapg.properties.promo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preselected"]) -> MetaOapg.properties.preselected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_method"]) -> MetaOapg.properties.shipping_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delivery_details"]) -> 'DeliveryDetailsV1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tms_reference"]) -> MetaOapg.properties.tms_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selected_addons"]) -> MetaOapg.properties.selected_addons: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "price", "tax_amount", "tax_rate", "description", "promo", "preselected", "shipping_method", "delivery_details", "tms_reference", "selected_addons", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_amount"]) -> MetaOapg.properties.tax_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_rate"]) -> MetaOapg.properties.tax_rate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["promo"]) -> typing.Union[MetaOapg.properties.promo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preselected"]) -> typing.Union[MetaOapg.properties.preselected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_method"]) -> typing.Union[MetaOapg.properties.shipping_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delivery_details"]) -> typing.Union['DeliveryDetailsV1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tms_reference"]) -> typing.Union[MetaOapg.properties.tms_reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selected_addons"]) -> typing.Union[MetaOapg.properties.selected_addons, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "price", "tax_amount", "tax_rate", "description", "promo", "preselected", "shipping_method", "delivery_details", "tms_reference", "selected_addons", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tax_amount: typing.Union[MetaOapg.properties.tax_amount, decimal.Decimal, int, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        tax_rate: typing.Union[MetaOapg.properties.tax_rate, decimal.Decimal, int, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        promo: typing.Union[MetaOapg.properties.promo, str, schemas.Unset] = schemas.unset,
        preselected: typing.Union[MetaOapg.properties.preselected, bool, schemas.Unset] = schemas.unset,
        shipping_method: typing.Union[MetaOapg.properties.shipping_method, str, schemas.Unset] = schemas.unset,
        delivery_details: typing.Union['DeliveryDetailsV1', schemas.Unset] = schemas.unset,
        tms_reference: typing.Union[MetaOapg.properties.tms_reference, str, schemas.Unset] = schemas.unset,
        selected_addons: typing.Union[MetaOapg.properties.selected_addons, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ShippingOption':
        return super().__new__(
            cls,
            *args,
            tax_amount=tax_amount,
            price=price,
            name=name,
            id=id,
            tax_rate=tax_rate,
            description=description,
            promo=promo,
            preselected=preselected,
            shipping_method=shipping_method,
            delivery_details=delivery_details,
            tms_reference=tms_reference,
            selected_addons=selected_addons,
            _configuration=_configuration,
            **kwargs,
        )

from klarna_checkout_python_sdk.model.delivery_details_v1 import DeliveryDetailsV1
from klarna_checkout_python_sdk.model.selected_addon import SelectedAddon
