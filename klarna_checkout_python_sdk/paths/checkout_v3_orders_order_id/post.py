# coding: utf-8

"""
    Klarna Checkout API V3

    The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from klarna_checkout_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from klarna_checkout_python_sdk.api_response import AsyncGeneratorResponse
from klarna_checkout_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from klarna_checkout_python_sdk import schemas  # noqa: F401

from klarna_checkout_python_sdk.model.gui import Gui as GuiSchema
from klarna_checkout_python_sdk.model.merchant_requested import MerchantRequested as MerchantRequestedSchema
from klarna_checkout_python_sdk.model.order_line import OrderLine as OrderLineSchema
from klarna_checkout_python_sdk.model.order import Order as OrderSchema
from klarna_checkout_python_sdk.model.discount_line import DiscountLine as DiscountLineSchema
from klarna_checkout_python_sdk.model.shipping_option import ShippingOption as ShippingOptionSchema
from klarna_checkout_python_sdk.model.order_tags import OrderTags as OrderTagsSchema
from klarna_checkout_python_sdk.model.merchant_urls import MerchantUrls as MerchantUrlsSchema
from klarna_checkout_python_sdk.model.attachment import Attachment as AttachmentSchema
from klarna_checkout_python_sdk.model.order_billing_countries import OrderBillingCountries as OrderBillingCountriesSchema
from klarna_checkout_python_sdk.model.order_shipping_countries import OrderShippingCountries as OrderShippingCountriesSchema
from klarna_checkout_python_sdk.model.address import Address as AddressSchema
from klarna_checkout_python_sdk.model.options import Options as OptionsSchema
from klarna_checkout_python_sdk.model.customer import Customer as CustomerSchema
from klarna_checkout_python_sdk.model.payment_provider import PaymentProvider as PaymentProviderSchema

from klarna_checkout_python_sdk.type.options import Options
from klarna_checkout_python_sdk.type.order_shipping_countries import OrderShippingCountries
from klarna_checkout_python_sdk.type.order_billing_countries import OrderBillingCountries
from klarna_checkout_python_sdk.type.discount_line import DiscountLine
from klarna_checkout_python_sdk.type.payment_provider import PaymentProvider
from klarna_checkout_python_sdk.type.merchant_requested import MerchantRequested
from klarna_checkout_python_sdk.type.order_line import OrderLine
from klarna_checkout_python_sdk.type.merchant_urls import MerchantUrls
from klarna_checkout_python_sdk.type.customer import Customer
from klarna_checkout_python_sdk.type.shipping_option import ShippingOption
from klarna_checkout_python_sdk.type.attachment import Attachment
from klarna_checkout_python_sdk.type.gui import Gui
from klarna_checkout_python_sdk.type.order import Order
from klarna_checkout_python_sdk.type.order_tags import OrderTags
from klarna_checkout_python_sdk.type.address import Address

from ...api_client import Dictionary
from klarna_checkout_python_sdk.pydantic.attachment import Attachment as AttachmentPydantic
from klarna_checkout_python_sdk.pydantic.address import Address as AddressPydantic
from klarna_checkout_python_sdk.pydantic.customer import Customer as CustomerPydantic
from klarna_checkout_python_sdk.pydantic.order import Order as OrderPydantic
from klarna_checkout_python_sdk.pydantic.order_tags import OrderTags as OrderTagsPydantic
from klarna_checkout_python_sdk.pydantic.merchant_requested import MerchantRequested as MerchantRequestedPydantic
from klarna_checkout_python_sdk.pydantic.order_shipping_countries import OrderShippingCountries as OrderShippingCountriesPydantic
from klarna_checkout_python_sdk.pydantic.merchant_urls import MerchantUrls as MerchantUrlsPydantic
from klarna_checkout_python_sdk.pydantic.order_billing_countries import OrderBillingCountries as OrderBillingCountriesPydantic
from klarna_checkout_python_sdk.pydantic.order_line import OrderLine as OrderLinePydantic
from klarna_checkout_python_sdk.pydantic.discount_line import DiscountLine as DiscountLinePydantic
from klarna_checkout_python_sdk.pydantic.payment_provider import PaymentProvider as PaymentProviderPydantic
from klarna_checkout_python_sdk.pydantic.options import Options as OptionsPydantic
from klarna_checkout_python_sdk.pydantic.shipping_option import ShippingOption as ShippingOptionPydantic
from klarna_checkout_python_sdk.pydantic.gui import Gui as GuiPydantic

from . import path

# Path params
OrderIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'order_id': typing.Union[OrderIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_order_id = api_client.PathParameter(
    name="order_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=OrderIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = OrderSchema


request_body_order = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor200ResponseBodyApplicationJson = OrderSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: Order


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: Order


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '403': _response_for_403,
    '404': _response_for_404,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _update_order_mapped_args(
        self,
        purchase_country: str,
        purchase_currency: str,
        locale: str,
        order_amount: int,
        order_tax_amount: int,
        order_lines: typing.List[OrderLine],
        order_id: str,
        tags: typing.Optional[OrderTags] = None,
        order_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        billing_address: typing.Optional[Address] = None,
        shipping_address: typing.Optional[Address] = None,
        customer: typing.Optional[Customer] = None,
        merchant_urls: typing.Optional[MerchantUrls] = None,
        html_snippet: typing.Optional[str] = None,
        merchant_reference1: typing.Optional[str] = None,
        merchant_reference2: typing.Optional[str] = None,
        started_at: typing.Optional[datetime] = None,
        completed_at: typing.Optional[datetime] = None,
        last_modified_at: typing.Optional[datetime] = None,
        options: typing.Optional[Options] = None,
        attachment: typing.Optional[Attachment] = None,
        external_payment_methods: typing.Optional[typing.List[PaymentProvider]] = None,
        external_checkouts: typing.Optional[typing.List[PaymentProvider]] = None,
        shipping_countries: typing.Optional[OrderShippingCountries] = None,
        shipping_options: typing.Optional[typing.List[ShippingOption]] = None,
        merchant_data: typing.Optional[str] = None,
        gui: typing.Optional[Gui] = None,
        merchant_requested: typing.Optional[MerchantRequested] = None,
        selected_shipping_option: typing.Optional[ShippingOption] = None,
        recurring: typing.Optional[bool] = None,
        recurring_token: typing.Optional[str] = None,
        recurring_description: typing.Optional[str] = None,
        billing_countries: typing.Optional[OrderBillingCountries] = None,
        discount_lines: typing.Optional[typing.List[DiscountLine]] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if tags is not None:
            _body["tags"] = tags
        if order_id is not None:
            _body["order_id"] = order_id
        if name is not None:
            _body["name"] = name
        if purchase_country is not None:
            _body["purchase_country"] = purchase_country
        if purchase_currency is not None:
            _body["purchase_currency"] = purchase_currency
        if locale is not None:
            _body["locale"] = locale
        if status is not None:
            _body["status"] = status
        if billing_address is not None:
            _body["billing_address"] = billing_address
        if shipping_address is not None:
            _body["shipping_address"] = shipping_address
        if order_amount is not None:
            _body["order_amount"] = order_amount
        if order_tax_amount is not None:
            _body["order_tax_amount"] = order_tax_amount
        if order_lines is not None:
            _body["order_lines"] = order_lines
        if customer is not None:
            _body["customer"] = customer
        if merchant_urls is not None:
            _body["merchant_urls"] = merchant_urls
        if html_snippet is not None:
            _body["html_snippet"] = html_snippet
        if merchant_reference1 is not None:
            _body["merchant_reference1"] = merchant_reference1
        if merchant_reference2 is not None:
            _body["merchant_reference2"] = merchant_reference2
        if started_at is not None:
            _body["started_at"] = started_at
        if completed_at is not None:
            _body["completed_at"] = completed_at
        if last_modified_at is not None:
            _body["last_modified_at"] = last_modified_at
        if options is not None:
            _body["options"] = options
        if attachment is not None:
            _body["attachment"] = attachment
        if external_payment_methods is not None:
            _body["external_payment_methods"] = external_payment_methods
        if external_checkouts is not None:
            _body["external_checkouts"] = external_checkouts
        if shipping_countries is not None:
            _body["shipping_countries"] = shipping_countries
        if shipping_options is not None:
            _body["shipping_options"] = shipping_options
        if merchant_data is not None:
            _body["merchant_data"] = merchant_data
        if gui is not None:
            _body["gui"] = gui
        if merchant_requested is not None:
            _body["merchant_requested"] = merchant_requested
        if selected_shipping_option is not None:
            _body["selected_shipping_option"] = selected_shipping_option
        if recurring is not None:
            _body["recurring"] = recurring
        if recurring_token is not None:
            _body["recurring_token"] = recurring_token
        if recurring_description is not None:
            _body["recurring_description"] = recurring_description
        if billing_countries is not None:
            _body["billing_countries"] = billing_countries
        if discount_lines is not None:
            _body["discount_lines"] = discount_lines
        args.body = _body
        if order_id is not None:
            _path_params["order_id"] = order_id
        args.path = _path_params
        return args

    async def _aupdate_order_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update an order
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_order_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/checkout/v3/orders/{order_id}',
            body=body,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_order.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_order_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update an order
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_order_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/checkout/v3/orders/{order_id}',
            body=body,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_order.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateOrderRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_order(
        self,
        purchase_country: str,
        purchase_currency: str,
        locale: str,
        order_amount: int,
        order_tax_amount: int,
        order_lines: typing.List[OrderLine],
        order_id: str,
        tags: typing.Optional[OrderTags] = None,
        order_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        billing_address: typing.Optional[Address] = None,
        shipping_address: typing.Optional[Address] = None,
        customer: typing.Optional[Customer] = None,
        merchant_urls: typing.Optional[MerchantUrls] = None,
        html_snippet: typing.Optional[str] = None,
        merchant_reference1: typing.Optional[str] = None,
        merchant_reference2: typing.Optional[str] = None,
        started_at: typing.Optional[datetime] = None,
        completed_at: typing.Optional[datetime] = None,
        last_modified_at: typing.Optional[datetime] = None,
        options: typing.Optional[Options] = None,
        attachment: typing.Optional[Attachment] = None,
        external_payment_methods: typing.Optional[typing.List[PaymentProvider]] = None,
        external_checkouts: typing.Optional[typing.List[PaymentProvider]] = None,
        shipping_countries: typing.Optional[OrderShippingCountries] = None,
        shipping_options: typing.Optional[typing.List[ShippingOption]] = None,
        merchant_data: typing.Optional[str] = None,
        gui: typing.Optional[Gui] = None,
        merchant_requested: typing.Optional[MerchantRequested] = None,
        selected_shipping_option: typing.Optional[ShippingOption] = None,
        recurring: typing.Optional[bool] = None,
        recurring_token: typing.Optional[str] = None,
        recurring_description: typing.Optional[str] = None,
        billing_countries: typing.Optional[OrderBillingCountries] = None,
        discount_lines: typing.Optional[typing.List[DiscountLine]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_order_mapped_args(
            purchase_country=purchase_country,
            purchase_currency=purchase_currency,
            locale=locale,
            order_amount=order_amount,
            order_tax_amount=order_tax_amount,
            order_lines=order_lines,
            order_id=order_id,
            tags=tags,
            order_id=order_id,
            name=name,
            status=status,
            billing_address=billing_address,
            shipping_address=shipping_address,
            customer=customer,
            merchant_urls=merchant_urls,
            html_snippet=html_snippet,
            merchant_reference1=merchant_reference1,
            merchant_reference2=merchant_reference2,
            started_at=started_at,
            completed_at=completed_at,
            last_modified_at=last_modified_at,
            options=options,
            attachment=attachment,
            external_payment_methods=external_payment_methods,
            external_checkouts=external_checkouts,
            shipping_countries=shipping_countries,
            shipping_options=shipping_options,
            merchant_data=merchant_data,
            gui=gui,
            merchant_requested=merchant_requested,
            selected_shipping_option=selected_shipping_option,
            recurring=recurring,
            recurring_token=recurring_token,
            recurring_description=recurring_description,
            billing_countries=billing_countries,
            discount_lines=discount_lines,
        )
        return await self._aupdate_order_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def update_order(
        self,
        purchase_country: str,
        purchase_currency: str,
        locale: str,
        order_amount: int,
        order_tax_amount: int,
        order_lines: typing.List[OrderLine],
        order_id: str,
        tags: typing.Optional[OrderTags] = None,
        order_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        billing_address: typing.Optional[Address] = None,
        shipping_address: typing.Optional[Address] = None,
        customer: typing.Optional[Customer] = None,
        merchant_urls: typing.Optional[MerchantUrls] = None,
        html_snippet: typing.Optional[str] = None,
        merchant_reference1: typing.Optional[str] = None,
        merchant_reference2: typing.Optional[str] = None,
        started_at: typing.Optional[datetime] = None,
        completed_at: typing.Optional[datetime] = None,
        last_modified_at: typing.Optional[datetime] = None,
        options: typing.Optional[Options] = None,
        attachment: typing.Optional[Attachment] = None,
        external_payment_methods: typing.Optional[typing.List[PaymentProvider]] = None,
        external_checkouts: typing.Optional[typing.List[PaymentProvider]] = None,
        shipping_countries: typing.Optional[OrderShippingCountries] = None,
        shipping_options: typing.Optional[typing.List[ShippingOption]] = None,
        merchant_data: typing.Optional[str] = None,
        gui: typing.Optional[Gui] = None,
        merchant_requested: typing.Optional[MerchantRequested] = None,
        selected_shipping_option: typing.Optional[ShippingOption] = None,
        recurring: typing.Optional[bool] = None,
        recurring_token: typing.Optional[str] = None,
        recurring_description: typing.Optional[str] = None,
        billing_countries: typing.Optional[OrderBillingCountries] = None,
        discount_lines: typing.Optional[typing.List[DiscountLine]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_order_mapped_args(
            purchase_country=purchase_country,
            purchase_currency=purchase_currency,
            locale=locale,
            order_amount=order_amount,
            order_tax_amount=order_tax_amount,
            order_lines=order_lines,
            order_id=order_id,
            tags=tags,
            order_id=order_id,
            name=name,
            status=status,
            billing_address=billing_address,
            shipping_address=shipping_address,
            customer=customer,
            merchant_urls=merchant_urls,
            html_snippet=html_snippet,
            merchant_reference1=merchant_reference1,
            merchant_reference2=merchant_reference2,
            started_at=started_at,
            completed_at=completed_at,
            last_modified_at=last_modified_at,
            options=options,
            attachment=attachment,
            external_payment_methods=external_payment_methods,
            external_checkouts=external_checkouts,
            shipping_countries=shipping_countries,
            shipping_options=shipping_options,
            merchant_data=merchant_data,
            gui=gui,
            merchant_requested=merchant_requested,
            selected_shipping_option=selected_shipping_option,
            recurring=recurring,
            recurring_token=recurring_token,
            recurring_description=recurring_description,
            billing_countries=billing_countries,
            discount_lines=discount_lines,
        )
        return self._update_order_oapg(
            body=args.body,
            path_params=args.path,
        )

class UpdateOrder(BaseApi):

    async def aupdate_order(
        self,
        purchase_country: str,
        purchase_currency: str,
        locale: str,
        order_amount: int,
        order_tax_amount: int,
        order_lines: typing.List[OrderLine],
        order_id: str,
        tags: typing.Optional[OrderTags] = None,
        order_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        billing_address: typing.Optional[Address] = None,
        shipping_address: typing.Optional[Address] = None,
        customer: typing.Optional[Customer] = None,
        merchant_urls: typing.Optional[MerchantUrls] = None,
        html_snippet: typing.Optional[str] = None,
        merchant_reference1: typing.Optional[str] = None,
        merchant_reference2: typing.Optional[str] = None,
        started_at: typing.Optional[datetime] = None,
        completed_at: typing.Optional[datetime] = None,
        last_modified_at: typing.Optional[datetime] = None,
        options: typing.Optional[Options] = None,
        attachment: typing.Optional[Attachment] = None,
        external_payment_methods: typing.Optional[typing.List[PaymentProvider]] = None,
        external_checkouts: typing.Optional[typing.List[PaymentProvider]] = None,
        shipping_countries: typing.Optional[OrderShippingCountries] = None,
        shipping_options: typing.Optional[typing.List[ShippingOption]] = None,
        merchant_data: typing.Optional[str] = None,
        gui: typing.Optional[Gui] = None,
        merchant_requested: typing.Optional[MerchantRequested] = None,
        selected_shipping_option: typing.Optional[ShippingOption] = None,
        recurring: typing.Optional[bool] = None,
        recurring_token: typing.Optional[str] = None,
        recurring_description: typing.Optional[str] = None,
        billing_countries: typing.Optional[OrderBillingCountries] = None,
        discount_lines: typing.Optional[typing.List[DiscountLine]] = None,
        validate: bool = False,
        **kwargs,
    ) -> OrderPydantic:
        raw_response = await self.raw.aupdate_order(
            purchase_country=purchase_country,
            purchase_currency=purchase_currency,
            locale=locale,
            order_amount=order_amount,
            order_tax_amount=order_tax_amount,
            order_lines=order_lines,
            order_id=order_id,
            tags=tags,
            order_id=order_id,
            name=name,
            status=status,
            billing_address=billing_address,
            shipping_address=shipping_address,
            customer=customer,
            merchant_urls=merchant_urls,
            html_snippet=html_snippet,
            merchant_reference1=merchant_reference1,
            merchant_reference2=merchant_reference2,
            started_at=started_at,
            completed_at=completed_at,
            last_modified_at=last_modified_at,
            options=options,
            attachment=attachment,
            external_payment_methods=external_payment_methods,
            external_checkouts=external_checkouts,
            shipping_countries=shipping_countries,
            shipping_options=shipping_options,
            merchant_data=merchant_data,
            gui=gui,
            merchant_requested=merchant_requested,
            selected_shipping_option=selected_shipping_option,
            recurring=recurring,
            recurring_token=recurring_token,
            recurring_description=recurring_description,
            billing_countries=billing_countries,
            discount_lines=discount_lines,
            **kwargs,
        )
        if validate:
            return OrderPydantic(**raw_response.body)
        return api_client.construct_model_instance(OrderPydantic, raw_response.body)
    
    
    def update_order(
        self,
        purchase_country: str,
        purchase_currency: str,
        locale: str,
        order_amount: int,
        order_tax_amount: int,
        order_lines: typing.List[OrderLine],
        order_id: str,
        tags: typing.Optional[OrderTags] = None,
        order_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        billing_address: typing.Optional[Address] = None,
        shipping_address: typing.Optional[Address] = None,
        customer: typing.Optional[Customer] = None,
        merchant_urls: typing.Optional[MerchantUrls] = None,
        html_snippet: typing.Optional[str] = None,
        merchant_reference1: typing.Optional[str] = None,
        merchant_reference2: typing.Optional[str] = None,
        started_at: typing.Optional[datetime] = None,
        completed_at: typing.Optional[datetime] = None,
        last_modified_at: typing.Optional[datetime] = None,
        options: typing.Optional[Options] = None,
        attachment: typing.Optional[Attachment] = None,
        external_payment_methods: typing.Optional[typing.List[PaymentProvider]] = None,
        external_checkouts: typing.Optional[typing.List[PaymentProvider]] = None,
        shipping_countries: typing.Optional[OrderShippingCountries] = None,
        shipping_options: typing.Optional[typing.List[ShippingOption]] = None,
        merchant_data: typing.Optional[str] = None,
        gui: typing.Optional[Gui] = None,
        merchant_requested: typing.Optional[MerchantRequested] = None,
        selected_shipping_option: typing.Optional[ShippingOption] = None,
        recurring: typing.Optional[bool] = None,
        recurring_token: typing.Optional[str] = None,
        recurring_description: typing.Optional[str] = None,
        billing_countries: typing.Optional[OrderBillingCountries] = None,
        discount_lines: typing.Optional[typing.List[DiscountLine]] = None,
        validate: bool = False,
    ) -> OrderPydantic:
        raw_response = self.raw.update_order(
            purchase_country=purchase_country,
            purchase_currency=purchase_currency,
            locale=locale,
            order_amount=order_amount,
            order_tax_amount=order_tax_amount,
            order_lines=order_lines,
            order_id=order_id,
            tags=tags,
            order_id=order_id,
            name=name,
            status=status,
            billing_address=billing_address,
            shipping_address=shipping_address,
            customer=customer,
            merchant_urls=merchant_urls,
            html_snippet=html_snippet,
            merchant_reference1=merchant_reference1,
            merchant_reference2=merchant_reference2,
            started_at=started_at,
            completed_at=completed_at,
            last_modified_at=last_modified_at,
            options=options,
            attachment=attachment,
            external_payment_methods=external_payment_methods,
            external_checkouts=external_checkouts,
            shipping_countries=shipping_countries,
            shipping_options=shipping_options,
            merchant_data=merchant_data,
            gui=gui,
            merchant_requested=merchant_requested,
            selected_shipping_option=selected_shipping_option,
            recurring=recurring,
            recurring_token=recurring_token,
            recurring_description=recurring_description,
            billing_countries=billing_countries,
            discount_lines=discount_lines,
        )
        if validate:
            return OrderPydantic(**raw_response.body)
        return api_client.construct_model_instance(OrderPydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        purchase_country: str,
        purchase_currency: str,
        locale: str,
        order_amount: int,
        order_tax_amount: int,
        order_lines: typing.List[OrderLine],
        order_id: str,
        tags: typing.Optional[OrderTags] = None,
        order_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        billing_address: typing.Optional[Address] = None,
        shipping_address: typing.Optional[Address] = None,
        customer: typing.Optional[Customer] = None,
        merchant_urls: typing.Optional[MerchantUrls] = None,
        html_snippet: typing.Optional[str] = None,
        merchant_reference1: typing.Optional[str] = None,
        merchant_reference2: typing.Optional[str] = None,
        started_at: typing.Optional[datetime] = None,
        completed_at: typing.Optional[datetime] = None,
        last_modified_at: typing.Optional[datetime] = None,
        options: typing.Optional[Options] = None,
        attachment: typing.Optional[Attachment] = None,
        external_payment_methods: typing.Optional[typing.List[PaymentProvider]] = None,
        external_checkouts: typing.Optional[typing.List[PaymentProvider]] = None,
        shipping_countries: typing.Optional[OrderShippingCountries] = None,
        shipping_options: typing.Optional[typing.List[ShippingOption]] = None,
        merchant_data: typing.Optional[str] = None,
        gui: typing.Optional[Gui] = None,
        merchant_requested: typing.Optional[MerchantRequested] = None,
        selected_shipping_option: typing.Optional[ShippingOption] = None,
        recurring: typing.Optional[bool] = None,
        recurring_token: typing.Optional[str] = None,
        recurring_description: typing.Optional[str] = None,
        billing_countries: typing.Optional[OrderBillingCountries] = None,
        discount_lines: typing.Optional[typing.List[DiscountLine]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_order_mapped_args(
            purchase_country=purchase_country,
            purchase_currency=purchase_currency,
            locale=locale,
            order_amount=order_amount,
            order_tax_amount=order_tax_amount,
            order_lines=order_lines,
            order_id=order_id,
            tags=tags,
            order_id=order_id,
            name=name,
            status=status,
            billing_address=billing_address,
            shipping_address=shipping_address,
            customer=customer,
            merchant_urls=merchant_urls,
            html_snippet=html_snippet,
            merchant_reference1=merchant_reference1,
            merchant_reference2=merchant_reference2,
            started_at=started_at,
            completed_at=completed_at,
            last_modified_at=last_modified_at,
            options=options,
            attachment=attachment,
            external_payment_methods=external_payment_methods,
            external_checkouts=external_checkouts,
            shipping_countries=shipping_countries,
            shipping_options=shipping_options,
            merchant_data=merchant_data,
            gui=gui,
            merchant_requested=merchant_requested,
            selected_shipping_option=selected_shipping_option,
            recurring=recurring,
            recurring_token=recurring_token,
            recurring_description=recurring_description,
            billing_countries=billing_countries,
            discount_lines=discount_lines,
        )
        return await self._aupdate_order_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        purchase_country: str,
        purchase_currency: str,
        locale: str,
        order_amount: int,
        order_tax_amount: int,
        order_lines: typing.List[OrderLine],
        order_id: str,
        tags: typing.Optional[OrderTags] = None,
        order_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        billing_address: typing.Optional[Address] = None,
        shipping_address: typing.Optional[Address] = None,
        customer: typing.Optional[Customer] = None,
        merchant_urls: typing.Optional[MerchantUrls] = None,
        html_snippet: typing.Optional[str] = None,
        merchant_reference1: typing.Optional[str] = None,
        merchant_reference2: typing.Optional[str] = None,
        started_at: typing.Optional[datetime] = None,
        completed_at: typing.Optional[datetime] = None,
        last_modified_at: typing.Optional[datetime] = None,
        options: typing.Optional[Options] = None,
        attachment: typing.Optional[Attachment] = None,
        external_payment_methods: typing.Optional[typing.List[PaymentProvider]] = None,
        external_checkouts: typing.Optional[typing.List[PaymentProvider]] = None,
        shipping_countries: typing.Optional[OrderShippingCountries] = None,
        shipping_options: typing.Optional[typing.List[ShippingOption]] = None,
        merchant_data: typing.Optional[str] = None,
        gui: typing.Optional[Gui] = None,
        merchant_requested: typing.Optional[MerchantRequested] = None,
        selected_shipping_option: typing.Optional[ShippingOption] = None,
        recurring: typing.Optional[bool] = None,
        recurring_token: typing.Optional[str] = None,
        recurring_description: typing.Optional[str] = None,
        billing_countries: typing.Optional[OrderBillingCountries] = None,
        discount_lines: typing.Optional[typing.List[DiscountLine]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_order_mapped_args(
            purchase_country=purchase_country,
            purchase_currency=purchase_currency,
            locale=locale,
            order_amount=order_amount,
            order_tax_amount=order_tax_amount,
            order_lines=order_lines,
            order_id=order_id,
            tags=tags,
            order_id=order_id,
            name=name,
            status=status,
            billing_address=billing_address,
            shipping_address=shipping_address,
            customer=customer,
            merchant_urls=merchant_urls,
            html_snippet=html_snippet,
            merchant_reference1=merchant_reference1,
            merchant_reference2=merchant_reference2,
            started_at=started_at,
            completed_at=completed_at,
            last_modified_at=last_modified_at,
            options=options,
            attachment=attachment,
            external_payment_methods=external_payment_methods,
            external_checkouts=external_checkouts,
            shipping_countries=shipping_countries,
            shipping_options=shipping_options,
            merchant_data=merchant_data,
            gui=gui,
            merchant_requested=merchant_requested,
            selected_shipping_option=selected_shipping_option,
            recurring=recurring,
            recurring_token=recurring_token,
            recurring_description=recurring_description,
            billing_countries=billing_countries,
            discount_lines=discount_lines,
        )
        return self._update_order_oapg(
            body=args.body,
            path_params=args.path,
        )

