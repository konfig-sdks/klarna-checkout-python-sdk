# coding: utf-8

"""
    Klarna Checkout API V3

    The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from klarna_checkout_python_sdk import schemas  # noqa: F401


class Options(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            require_validate_callback_success = schemas.BoolSchema
            
            
            class acquiring_channel(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'ECOMMERCE|MOTO|IN_STORE|TELESALES',
                    }]
            vat_removed = schemas.BoolSchema
            allow_separate_shipping_address = schemas.BoolSchema
            
            
            class color_button(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^#[A-Fa-f0-9]{6}$',
                    }]
            
            
            class color_button_text(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^#[A-Fa-f0-9]{6}$',
                    }]
            
            
            class color_checkbox(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^#[A-Fa-f0-9]{6}$',
                    }]
            
            
            class color_checkbox_checkmark(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^#[A-Fa-f0-9]{6}$',
                    }]
            
            
            class color_header(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^#[A-Fa-f0-9]{6}$',
                    }]
            
            
            class color_link(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^#[A-Fa-f0-9]{6}$',
                    }]
            date_of_birth_mandatory = schemas.BoolSchema
            shipping_details = schemas.StrSchema
            title_mandatory = schemas.BoolSchema
        
            @staticmethod
            def additional_checkbox() -> typing.Type['Checkbox']:
                return Checkbox
            national_identification_number_mandatory = schemas.BoolSchema
            additional_merchant_terms = schemas.StrSchema
            phone_mandatory = schemas.BoolSchema
            radius_border = schemas.StrSchema
        
            @staticmethod
            def allowed_customer_types() -> typing.Type['OptionsAllowedCustomerTypes']:
                return OptionsAllowedCustomerTypes
            show_subtotal_detail = schemas.BoolSchema
            
            
            class additional_checkboxes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CheckboxV2']:
                        return CheckboxV2
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CheckboxV2'], typing.List['CheckboxV2']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additional_checkboxes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CheckboxV2':
                    return super().__getitem__(i)
            verify_national_identification_number = schemas.BoolSchema
            auto_capture = schemas.BoolSchema
            require_client_validation = schemas.BoolSchema
            enable_discount_module = schemas.BoolSchema
            show_vat_registration_number_field = schemas.BoolSchema
            __annotations__ = {
                "require_validate_callback_success": require_validate_callback_success,
                "acquiring_channel": acquiring_channel,
                "vat_removed": vat_removed,
                "allow_separate_shipping_address": allow_separate_shipping_address,
                "color_button": color_button,
                "color_button_text": color_button_text,
                "color_checkbox": color_checkbox,
                "color_checkbox_checkmark": color_checkbox_checkmark,
                "color_header": color_header,
                "color_link": color_link,
                "date_of_birth_mandatory": date_of_birth_mandatory,
                "shipping_details": shipping_details,
                "title_mandatory": title_mandatory,
                "additional_checkbox": additional_checkbox,
                "national_identification_number_mandatory": national_identification_number_mandatory,
                "additional_merchant_terms": additional_merchant_terms,
                "phone_mandatory": phone_mandatory,
                "radius_border": radius_border,
                "allowed_customer_types": allowed_customer_types,
                "show_subtotal_detail": show_subtotal_detail,
                "additional_checkboxes": additional_checkboxes,
                "verify_national_identification_number": verify_national_identification_number,
                "auto_capture": auto_capture,
                "require_client_validation": require_client_validation,
                "enable_discount_module": enable_discount_module,
                "show_vat_registration_number_field": show_vat_registration_number_field,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["require_validate_callback_success"]) -> MetaOapg.properties.require_validate_callback_success: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acquiring_channel"]) -> MetaOapg.properties.acquiring_channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vat_removed"]) -> MetaOapg.properties.vat_removed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_separate_shipping_address"]) -> MetaOapg.properties.allow_separate_shipping_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color_button"]) -> MetaOapg.properties.color_button: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color_button_text"]) -> MetaOapg.properties.color_button_text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color_checkbox"]) -> MetaOapg.properties.color_checkbox: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color_checkbox_checkmark"]) -> MetaOapg.properties.color_checkbox_checkmark: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color_header"]) -> MetaOapg.properties.color_header: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color_link"]) -> MetaOapg.properties.color_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_birth_mandatory"]) -> MetaOapg.properties.date_of_birth_mandatory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_details"]) -> MetaOapg.properties.shipping_details: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title_mandatory"]) -> MetaOapg.properties.title_mandatory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_checkbox"]) -> 'Checkbox': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["national_identification_number_mandatory"]) -> MetaOapg.properties.national_identification_number_mandatory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_merchant_terms"]) -> MetaOapg.properties.additional_merchant_terms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_mandatory"]) -> MetaOapg.properties.phone_mandatory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radius_border"]) -> MetaOapg.properties.radius_border: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowed_customer_types"]) -> 'OptionsAllowedCustomerTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_subtotal_detail"]) -> MetaOapg.properties.show_subtotal_detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_checkboxes"]) -> MetaOapg.properties.additional_checkboxes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verify_national_identification_number"]) -> MetaOapg.properties.verify_national_identification_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_capture"]) -> MetaOapg.properties.auto_capture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["require_client_validation"]) -> MetaOapg.properties.require_client_validation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_discount_module"]) -> MetaOapg.properties.enable_discount_module: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_vat_registration_number_field"]) -> MetaOapg.properties.show_vat_registration_number_field: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["require_validate_callback_success", "acquiring_channel", "vat_removed", "allow_separate_shipping_address", "color_button", "color_button_text", "color_checkbox", "color_checkbox_checkmark", "color_header", "color_link", "date_of_birth_mandatory", "shipping_details", "title_mandatory", "additional_checkbox", "national_identification_number_mandatory", "additional_merchant_terms", "phone_mandatory", "radius_border", "allowed_customer_types", "show_subtotal_detail", "additional_checkboxes", "verify_national_identification_number", "auto_capture", "require_client_validation", "enable_discount_module", "show_vat_registration_number_field", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["require_validate_callback_success"]) -> typing.Union[MetaOapg.properties.require_validate_callback_success, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acquiring_channel"]) -> typing.Union[MetaOapg.properties.acquiring_channel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vat_removed"]) -> typing.Union[MetaOapg.properties.vat_removed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_separate_shipping_address"]) -> typing.Union[MetaOapg.properties.allow_separate_shipping_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color_button"]) -> typing.Union[MetaOapg.properties.color_button, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color_button_text"]) -> typing.Union[MetaOapg.properties.color_button_text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color_checkbox"]) -> typing.Union[MetaOapg.properties.color_checkbox, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color_checkbox_checkmark"]) -> typing.Union[MetaOapg.properties.color_checkbox_checkmark, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color_header"]) -> typing.Union[MetaOapg.properties.color_header, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color_link"]) -> typing.Union[MetaOapg.properties.color_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_birth_mandatory"]) -> typing.Union[MetaOapg.properties.date_of_birth_mandatory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_details"]) -> typing.Union[MetaOapg.properties.shipping_details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title_mandatory"]) -> typing.Union[MetaOapg.properties.title_mandatory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_checkbox"]) -> typing.Union['Checkbox', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["national_identification_number_mandatory"]) -> typing.Union[MetaOapg.properties.national_identification_number_mandatory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_merchant_terms"]) -> typing.Union[MetaOapg.properties.additional_merchant_terms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_mandatory"]) -> typing.Union[MetaOapg.properties.phone_mandatory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radius_border"]) -> typing.Union[MetaOapg.properties.radius_border, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowed_customer_types"]) -> typing.Union['OptionsAllowedCustomerTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_subtotal_detail"]) -> typing.Union[MetaOapg.properties.show_subtotal_detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_checkboxes"]) -> typing.Union[MetaOapg.properties.additional_checkboxes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verify_national_identification_number"]) -> typing.Union[MetaOapg.properties.verify_national_identification_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_capture"]) -> typing.Union[MetaOapg.properties.auto_capture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["require_client_validation"]) -> typing.Union[MetaOapg.properties.require_client_validation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_discount_module"]) -> typing.Union[MetaOapg.properties.enable_discount_module, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_vat_registration_number_field"]) -> typing.Union[MetaOapg.properties.show_vat_registration_number_field, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["require_validate_callback_success", "acquiring_channel", "vat_removed", "allow_separate_shipping_address", "color_button", "color_button_text", "color_checkbox", "color_checkbox_checkmark", "color_header", "color_link", "date_of_birth_mandatory", "shipping_details", "title_mandatory", "additional_checkbox", "national_identification_number_mandatory", "additional_merchant_terms", "phone_mandatory", "radius_border", "allowed_customer_types", "show_subtotal_detail", "additional_checkboxes", "verify_national_identification_number", "auto_capture", "require_client_validation", "enable_discount_module", "show_vat_registration_number_field", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        require_validate_callback_success: typing.Union[MetaOapg.properties.require_validate_callback_success, bool, schemas.Unset] = schemas.unset,
        acquiring_channel: typing.Union[MetaOapg.properties.acquiring_channel, str, schemas.Unset] = schemas.unset,
        vat_removed: typing.Union[MetaOapg.properties.vat_removed, bool, schemas.Unset] = schemas.unset,
        allow_separate_shipping_address: typing.Union[MetaOapg.properties.allow_separate_shipping_address, bool, schemas.Unset] = schemas.unset,
        color_button: typing.Union[MetaOapg.properties.color_button, str, schemas.Unset] = schemas.unset,
        color_button_text: typing.Union[MetaOapg.properties.color_button_text, str, schemas.Unset] = schemas.unset,
        color_checkbox: typing.Union[MetaOapg.properties.color_checkbox, str, schemas.Unset] = schemas.unset,
        color_checkbox_checkmark: typing.Union[MetaOapg.properties.color_checkbox_checkmark, str, schemas.Unset] = schemas.unset,
        color_header: typing.Union[MetaOapg.properties.color_header, str, schemas.Unset] = schemas.unset,
        color_link: typing.Union[MetaOapg.properties.color_link, str, schemas.Unset] = schemas.unset,
        date_of_birth_mandatory: typing.Union[MetaOapg.properties.date_of_birth_mandatory, bool, schemas.Unset] = schemas.unset,
        shipping_details: typing.Union[MetaOapg.properties.shipping_details, str, schemas.Unset] = schemas.unset,
        title_mandatory: typing.Union[MetaOapg.properties.title_mandatory, bool, schemas.Unset] = schemas.unset,
        additional_checkbox: typing.Union['Checkbox', schemas.Unset] = schemas.unset,
        national_identification_number_mandatory: typing.Union[MetaOapg.properties.national_identification_number_mandatory, bool, schemas.Unset] = schemas.unset,
        additional_merchant_terms: typing.Union[MetaOapg.properties.additional_merchant_terms, str, schemas.Unset] = schemas.unset,
        phone_mandatory: typing.Union[MetaOapg.properties.phone_mandatory, bool, schemas.Unset] = schemas.unset,
        radius_border: typing.Union[MetaOapg.properties.radius_border, str, schemas.Unset] = schemas.unset,
        allowed_customer_types: typing.Union['OptionsAllowedCustomerTypes', schemas.Unset] = schemas.unset,
        show_subtotal_detail: typing.Union[MetaOapg.properties.show_subtotal_detail, bool, schemas.Unset] = schemas.unset,
        additional_checkboxes: typing.Union[MetaOapg.properties.additional_checkboxes, list, tuple, schemas.Unset] = schemas.unset,
        verify_national_identification_number: typing.Union[MetaOapg.properties.verify_national_identification_number, bool, schemas.Unset] = schemas.unset,
        auto_capture: typing.Union[MetaOapg.properties.auto_capture, bool, schemas.Unset] = schemas.unset,
        require_client_validation: typing.Union[MetaOapg.properties.require_client_validation, bool, schemas.Unset] = schemas.unset,
        enable_discount_module: typing.Union[MetaOapg.properties.enable_discount_module, bool, schemas.Unset] = schemas.unset,
        show_vat_registration_number_field: typing.Union[MetaOapg.properties.show_vat_registration_number_field, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Options':
        return super().__new__(
            cls,
            *args,
            require_validate_callback_success=require_validate_callback_success,
            acquiring_channel=acquiring_channel,
            vat_removed=vat_removed,
            allow_separate_shipping_address=allow_separate_shipping_address,
            color_button=color_button,
            color_button_text=color_button_text,
            color_checkbox=color_checkbox,
            color_checkbox_checkmark=color_checkbox_checkmark,
            color_header=color_header,
            color_link=color_link,
            date_of_birth_mandatory=date_of_birth_mandatory,
            shipping_details=shipping_details,
            title_mandatory=title_mandatory,
            additional_checkbox=additional_checkbox,
            national_identification_number_mandatory=national_identification_number_mandatory,
            additional_merchant_terms=additional_merchant_terms,
            phone_mandatory=phone_mandatory,
            radius_border=radius_border,
            allowed_customer_types=allowed_customer_types,
            show_subtotal_detail=show_subtotal_detail,
            additional_checkboxes=additional_checkboxes,
            verify_national_identification_number=verify_national_identification_number,
            auto_capture=auto_capture,
            require_client_validation=require_client_validation,
            enable_discount_module=enable_discount_module,
            show_vat_registration_number_field=show_vat_registration_number_field,
            _configuration=_configuration,
            **kwargs,
        )

from klarna_checkout_python_sdk.model.checkbox import Checkbox
from klarna_checkout_python_sdk.model.checkbox_v2 import CheckboxV2
from klarna_checkout_python_sdk.model.options_allowed_customer_types import OptionsAllowedCustomerTypes
