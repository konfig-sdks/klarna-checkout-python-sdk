# coding: utf-8

"""
    Klarna Checkout API V3

    The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from klarna_checkout_python_sdk import schemas  # noqa: F401


class DeliveryDetailsV1(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            carrier = schemas.StrSchema
        
            @staticmethod
            def product() -> typing.Type['ProductV1']:
                return ProductV1
        
            @staticmethod
            def timeslot() -> typing.Type['TimeslotV1']:
                return TimeslotV1
        
            @staticmethod
            def pickup_location() -> typing.Type['PickupLocationV1']:
                return PickupLocationV1
            __annotations__ = {
                "carrier": carrier,
                "product": product,
                "timeslot": timeslot,
                "pickup_location": pickup_location,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier"]) -> MetaOapg.properties.carrier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product"]) -> 'ProductV1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeslot"]) -> 'TimeslotV1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pickup_location"]) -> 'PickupLocationV1': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["carrier", "product", "timeslot", "pickup_location", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier"]) -> typing.Union[MetaOapg.properties.carrier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product"]) -> typing.Union['ProductV1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeslot"]) -> typing.Union['TimeslotV1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pickup_location"]) -> typing.Union['PickupLocationV1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["carrier", "product", "timeslot", "pickup_location", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        carrier: typing.Union[MetaOapg.properties.carrier, str, schemas.Unset] = schemas.unset,
        product: typing.Union['ProductV1', schemas.Unset] = schemas.unset,
        timeslot: typing.Union['TimeslotV1', schemas.Unset] = schemas.unset,
        pickup_location: typing.Union['PickupLocationV1', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeliveryDetailsV1':
        return super().__new__(
            cls,
            *args,
            carrier=carrier,
            product=product,
            timeslot=timeslot,
            pickup_location=pickup_location,
            _configuration=_configuration,
            **kwargs,
        )

from klarna_checkout_python_sdk.model.pickup_location_v1 import PickupLocationV1
from klarna_checkout_python_sdk.model.product_v1 import ProductV1
from klarna_checkout_python_sdk.model.timeslot_v1 import TimeslotV1
