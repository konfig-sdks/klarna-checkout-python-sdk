# coding: utf-8

"""
    Klarna Checkout API V3

    The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from klarna_checkout_python_sdk import schemas  # noqa: F401


class MerchantUrls(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "terms",
            "confirmation",
            "checkout",
            "push",
        }
        
        class properties:
            
            
            class terms(
                schemas.StrSchema
            ):
                pass
            
            
            class checkout(
                schemas.StrSchema
            ):
                pass
            
            
            class confirmation(
                schemas.StrSchema
            ):
                pass
            
            
            class push(
                schemas.StrSchema
            ):
                pass
            
            
            class validation(
                schemas.StrSchema
            ):
                pass
            
            
            class notification(
                schemas.StrSchema
            ):
                pass
            
            
            class cancellation_terms(
                schemas.StrSchema
            ):
                pass
            
            
            class shipping_option_update(
                schemas.StrSchema
            ):
                pass
            
            
            class address_update(
                schemas.StrSchema
            ):
                pass
            
            
            class country_change(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "terms": terms,
                "checkout": checkout,
                "confirmation": confirmation,
                "push": push,
                "validation": validation,
                "notification": notification,
                "cancellation_terms": cancellation_terms,
                "shipping_option_update": shipping_option_update,
                "address_update": address_update,
                "country_change": country_change,
            }
    
    terms: MetaOapg.properties.terms
    confirmation: MetaOapg.properties.confirmation
    checkout: MetaOapg.properties.checkout
    push: MetaOapg.properties.push
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terms"]) -> MetaOapg.properties.terms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkout"]) -> MetaOapg.properties.checkout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmation"]) -> MetaOapg.properties.confirmation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["push"]) -> MetaOapg.properties.push: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validation"]) -> MetaOapg.properties.validation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notification"]) -> MetaOapg.properties.notification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancellation_terms"]) -> MetaOapg.properties.cancellation_terms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_option_update"]) -> MetaOapg.properties.shipping_option_update: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_update"]) -> MetaOapg.properties.address_update: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_change"]) -> MetaOapg.properties.country_change: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["terms", "checkout", "confirmation", "push", "validation", "notification", "cancellation_terms", "shipping_option_update", "address_update", "country_change", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terms"]) -> MetaOapg.properties.terms: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkout"]) -> MetaOapg.properties.checkout: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmation"]) -> MetaOapg.properties.confirmation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["push"]) -> MetaOapg.properties.push: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validation"]) -> typing.Union[MetaOapg.properties.validation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notification"]) -> typing.Union[MetaOapg.properties.notification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancellation_terms"]) -> typing.Union[MetaOapg.properties.cancellation_terms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_option_update"]) -> typing.Union[MetaOapg.properties.shipping_option_update, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_update"]) -> typing.Union[MetaOapg.properties.address_update, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_change"]) -> typing.Union[MetaOapg.properties.country_change, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["terms", "checkout", "confirmation", "push", "validation", "notification", "cancellation_terms", "shipping_option_update", "address_update", "country_change", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        terms: typing.Union[MetaOapg.properties.terms, str, ],
        confirmation: typing.Union[MetaOapg.properties.confirmation, str, ],
        checkout: typing.Union[MetaOapg.properties.checkout, str, ],
        push: typing.Union[MetaOapg.properties.push, str, ],
        validation: typing.Union[MetaOapg.properties.validation, str, schemas.Unset] = schemas.unset,
        notification: typing.Union[MetaOapg.properties.notification, str, schemas.Unset] = schemas.unset,
        cancellation_terms: typing.Union[MetaOapg.properties.cancellation_terms, str, schemas.Unset] = schemas.unset,
        shipping_option_update: typing.Union[MetaOapg.properties.shipping_option_update, str, schemas.Unset] = schemas.unset,
        address_update: typing.Union[MetaOapg.properties.address_update, str, schemas.Unset] = schemas.unset,
        country_change: typing.Union[MetaOapg.properties.country_change, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MerchantUrls':
        return super().__new__(
            cls,
            *args,
            terms=terms,
            confirmation=confirmation,
            checkout=checkout,
            push=push,
            validation=validation,
            notification=notification,
            cancellation_terms=cancellation_terms,
            shipping_option_update=shipping_option_update,
            address_update=address_update,
            country_change=country_change,
            _configuration=_configuration,
            **kwargs,
        )
