# coding: utf-8

"""
    Klarna Checkout API V3

    The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from klarna_checkout_python_sdk.pydantic.address import Address
from klarna_checkout_python_sdk.pydantic.attachment import Attachment
from klarna_checkout_python_sdk.pydantic.customer import Customer
from klarna_checkout_python_sdk.pydantic.discount_line import DiscountLine
from klarna_checkout_python_sdk.pydantic.gui import Gui
from klarna_checkout_python_sdk.pydantic.merchant_requested import MerchantRequested
from klarna_checkout_python_sdk.pydantic.merchant_urls import MerchantUrls
from klarna_checkout_python_sdk.pydantic.options import Options
from klarna_checkout_python_sdk.pydantic.order_billing_countries import OrderBillingCountries
from klarna_checkout_python_sdk.pydantic.order_line import OrderLine
from klarna_checkout_python_sdk.pydantic.order_shipping_countries import OrderShippingCountries
from klarna_checkout_python_sdk.pydantic.order_tags import OrderTags
from klarna_checkout_python_sdk.pydantic.payment_provider import PaymentProvider
from klarna_checkout_python_sdk.pydantic.shipping_option import ShippingOption

class Order(BaseModel):
    # The purchase country of the merchant's store. The format to be used is ISO 3166 alpha-2. Eg: GB, SE, DE, US, etc.   Note: purchase country and currency need to match the defined merchant configuration. For global configuration read this https://docs.klarna.com/klarna-checkout/popular-use-cases/selling-to-multiple-countries/
    purchase_country: str = Field(alias='purchase_country')

    # The purchase currency of the merchant's store. The format to be used is ISO 4217. Eg: USD, EUR, SEK, GBP, etc.  Note: purchase country and currency need to match the defined merchant configuration. For global configuration read this https://docs.klarna.com/klarna-checkout/popular-use-cases/selling-to-multiple-countries/
    purchase_currency: str = Field(alias='purchase_currency')

    # Used to define the language and region of the customer. RFC 1766 customer's locale.
    locale: str = Field(alias='locale')

    # Total amount of the order including tax and any available discounts. The value should be in non-negative minor units.  Example: 25 Euros should be 2500.
    order_amount: int = Field(alias='order_amount')

    # Total tax amount of the order. The value should be in non-negative minor units.  Example: 25 Euros should be 2500.
    order_tax_amount: int = Field(alias='order_tax_amount')

    # An array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
    order_lines: typing.List[OrderLine] = Field(alias='order_lines')

    tags: typing.Optional[OrderTags] = Field(None, alias='tags')

    # Unique order ID that will be used for the entire lifecycle of the order. (max 255 characters)
    order_id: typing.Optional[str] = Field(None, alias='order_id')

    # The merchant name (max 255 characters).
    name: typing.Optional[str] = Field(None, alias='name')

    # The current status of the order. The status will be ‘incomplete’ until the customer has been successfully authorized.
    status: typing.Optional[str] = Field(None, alias='status')

    billing_address: typing.Optional[Address] = Field(None, alias='billing_address')

    shipping_address: typing.Optional[Address] = Field(None, alias='shipping_address')

    customer: typing.Optional[Customer] = Field(None, alias='customer')

    merchant_urls: typing.Optional[MerchantUrls] = Field(None, alias='merchant_urls')

    # The HTML snippet that is used to render the checkout in an iframe.
    html_snippet: typing.Optional[str] = Field(None, alias='html_snippet')

    # Used for storing merchant's internal order number or other reference. If set, will be shown on the confirmation page as \"order number\" . The value is also available in the settlement files. (max 255 characters). Example: \"45aa52f387871e3a210645d4\"
    merchant_reference1: typing.Optional[str] = Field(None, alias='merchant_reference1')

    # Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters). Example: \"45aa52f387871e3a210645d4\"
    merchant_reference2: typing.Optional[str] = Field(None, alias='merchant_reference2')

    # ISO 8601 datetime. The date and time when the order has been created. The format will be as follows: \"yyyy-mm-ddThh:mm:ssZ\"
    started_at: typing.Optional[datetime] = Field(None, alias='started_at')

    # ISO 8601 datetime. The date and time when the order has been completed. The format will be as follows: \"yyyy-mm-ddThh:mm:ssZ\"
    completed_at: typing.Optional[datetime] = Field(None, alias='completed_at')

    # ISO 8601 datetime. The date and time when the order was last modified. The format will be as follows: \"yyyy-mm-ddThh:mm:ssZ\"
    last_modified_at: typing.Optional[datetime] = Field(None, alias='last_modified_at')

    options: typing.Optional[Options] = Field(None, alias='options')

    attachment: typing.Optional[Attachment] = Field(None, alias='attachment')

    # List of external payment methods that will be displayed as part of payment methods in the checkout.
    external_payment_methods: typing.Optional[typing.List[PaymentProvider]] = Field(None, alias='external_payment_methods')

    # List of external checkouts that will be displayed as part of payment methods in the checkout. The image_url is required, and the image size has to be 276x48px
    external_checkouts: typing.Optional[typing.List[PaymentProvider]] = Field(None, alias='external_checkouts')

    shipping_countries: typing.Optional[OrderShippingCountries] = Field(None, alias='shipping_countries')

    # A list of shipping options available for this order.
    shipping_options: typing.Optional[typing.List[ShippingOption]] = Field(None, alias='shipping_options')

    # Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters).
    merchant_data: typing.Optional[str] = Field(None, alias='merchant_data')

    gui: typing.Optional[Gui] = Field(None, alias='gui')

    merchant_requested: typing.Optional[MerchantRequested] = Field(None, alias='merchant_requested')

    selected_shipping_option: typing.Optional[ShippingOption] = Field(None, alias='selected_shipping_option')

    # Indicates whether this purchase will create a token that can be used by the merchant to create recurring purchases. This must be enabled for the merchant to use. Default: false  Depending on specified country, recurring could be used for the following payment methods: Pay Later, Direct Debit, Card.
    recurring: typing.Optional[bool] = Field(None, alias='recurring')

    # Token to be used when creating recurring orders.
    recurring_token: typing.Optional[str] = Field(None, alias='recurring_token')

    # Description to be added to the recurring order.
    recurring_description: typing.Optional[str] = Field(None, alias='recurring_description')

    billing_countries: typing.Optional[OrderBillingCountries] = Field(None, alias='billing_countries')

    # List of discounts applied to this order via the KCO discount-service
    discount_lines: typing.Optional[typing.List[DiscountLine]] = Field(None, alias='discount_lines')
    class Config:
        arbitrary_types_allowed = True
